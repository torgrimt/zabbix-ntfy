zabbix_export:
  version: '7.0'
  media_types:
    - name: ntfy.sh
      type: WEBHOOK
      parameters:
        - name: Message
          value: '{ALERT.MESSAGE}'
        - name: Username
          value: '{$NTFY.USER}'
        - name: Password
          value: '{$NTFY.PASS}'
        - name: Priority_average
          value: default
        - name: Priority_disaster
          value: max
        - name: Priority_high
          value: high
        - name: Priority_information
          value: min
        - name: Priority_not_classified
          value: low
        - name: Priority_resolved
          value: low
        - name: Priority_warning
          value: low
        - name: Subject
          value: '{ALERT.SUBJECT}'
        - name: Token
          value: '{$NTFY.TOKEN}'
        - name: URL
          value: '{$ALERT.SENDTO}'
        - name: ZabbixURL
          value: '{$ZABBIX.URL}'
        - name: Nseverity
          value: '{EVENT.NSEVERITY}'
      script: |
        try {
          Zabbix.log(4, '[ ntfy Webhook ] Executed with params: ' + value);
          var params = JSON.parse(value);
          severities = [
                {name: 'not_classified'},
                {name: 'information'},
                {name: 'warning'},
                {name: 'average'},
                {name: 'high'},
                {name: 'disaster'}
          ];
          
          if (!params.URL) {
              throw 'Cannot get ntfy url!';
          }
        
          var response, request = new HttpRequest();
          // Check for proxy
          if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {
              request.setProxy(params.HTTPProxy);
          }

          if (params.Subject && params.Subject !== '') {
              request.addHeader('Title: ' + params.Subject);
          } else {
              request.addHeader('Title: Zabbix');
          }

          // Determine Priority, or just use 'default' if not chosen by user
          // Priority defined by: https://docs.ntfy.sh/publish/#message-priority
          priority = params['Priority_' + severities[params.Nseverity].name] || 'default';
          if (priority !== 'min' && priority !== 'low' && priority !== 'default' && priority !== 'high' && priority !== 'max' && priority !== 'urgent'){
              throw '"priority" should be min, low, default, high, max, or urgent';
          }

          request.addHeader('X-Priority: ' + priority);

          if (params.Token && params.Token !== '') {
              request.addHeader('Authorization: Bearer ' + params.Token);
          } else if (params.Username && params.Password && params.Username !== '' && params.Password !== '') {
              request.setHttpAuth(HTTPAUTH_BASIC, params.Username, params.Password);
          }

          if (params.ZabbixURL) {
              request.addHeader('Actions: view, Open Zabbix, ' + params.ZabbixURL);
          }

          // Icon path may change, but I'm not sure of a better location
          request.addHeader('Icon: https://git.zabbix.com/projects/ZBX/repos/zabbix/raw/ui/assets/img/touch-icon-192x192.png?at=refs%2Fheads%2Fmaster')

          //if a topic is provided, include this in the URL, we assume that the Macro would just be the server, not including a topic
          if (params.Topic && params.Topic !== '') {
              params.URL = params.URL + '/' + params.Topic;
          }
          
          response = request.post(params.URL, params.Message);
          return true;
        }
        catch (error) {
            Zabbix.log(3, '[ ntfy webhook ] notification failed: ' + error);
            throw 'Sending failed: ' + error;
        }
      message_templates:
        - event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: 'Problem: {EVENT.NAME}'
          message: |
            Problem started at {EVENT.TIME} on {EVENT.DATE}
            Problem name: {EVENT.NAME}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Operational data: {EVENT.OPDATA}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: 'Resolved in {EVENT.DURATION}: {EVENT.NAME}'
          message: |
            Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: UPDATE
          subject: 'Updated problem in {EVENT.AGE}: {EVENT.NAME}'
          message: |
            {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
            {EVENT.UPDATE.MESSAGE}
            
            Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.
        - event_source: DISCOVERY
          operation_mode: PROBLEM
          subject: 'Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}'
          message: |
            Discovery rule: {DISCOVERY.RULE.NAME}
            
            Device IP: {DISCOVERY.DEVICE.IPADDRESS}
            Device DNS: {DISCOVERY.DEVICE.DNS}
            Device status: {DISCOVERY.DEVICE.STATUS}
            Device uptime: {DISCOVERY.DEVICE.UPTIME}
            
            Device service name: {DISCOVERY.SERVICE.NAME}
            Device service port: {DISCOVERY.SERVICE.PORT}
            Device service status: {DISCOVERY.SERVICE.STATUS}
            Device service uptime: {DISCOVERY.SERVICE.UPTIME}
        - event_source: AUTOREGISTRATION
          operation_mode: PROBLEM
          subject: 'Autoregistration: {HOST.HOST}'
          message: |
            Host name: {HOST.HOST}
            Host IP: {HOST.IP}
            Agent port: {HOST.PORT}
        - event_source: INTERNAL
          operation_mode: PROBLEM
        - event_source: INTERNAL
          operation_mode: RECOVERY
        - event_source: SERVICE
          operation_mode: PROBLEM
          subject: 'Service "{SERVICE.NAME}" problem: {EVENT.NAME}'
          message: |
            Service problem started at {EVENT.TIME} on {EVENT.DATE}
            Service problem name: {EVENT.NAME}
            Service: {SERVICE.NAME}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            Service description: {SERVICE.DESCRIPTION}
            
            {SERVICE.ROOTCAUSE}
        - event_source: SERVICE
          operation_mode: RECOVERY
          subject: 'Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}'
          message: |
            Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            Service description: {SERVICE.DESCRIPTION}
        - event_source: SERVICE
          operation_mode: UPDATE
          subject: 'Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}'
          message: |
            Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
            Current problem age is {EVENT.AGE}.
            Service description: {SERVICE.DESCRIPTION}
            
            {SERVICE.ROOTCAUSE}
